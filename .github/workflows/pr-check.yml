name: PR Merge Check - Ramparts

on:
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
    branches:
      - "main"
  merge_group:
    types:
      - checks_requested

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  GH_SEC_REPORT: false
  TRIVY_SEVERITY: "HIGH,CRITICAL"
  TRIVY_REPORT_FILE: "trivy-scan-result"

jobs:
  javelin-lint-check:
    permissions:
      contents: 'read'
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Check code without building
        run: cargo check --all-features

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run Clippy linter
        run: cargo clippy --all-features -- -D warnings

  javelin-sast-check:
    permissions:
      contents: 'read'
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Run tests
        run: cargo test --all-features

      - name: Run tests with coverage
        run: |
          cargo install cargo-tarpaulin
          cargo tarpaulin --all-features --out Html --output-dir coverage
        continue-on-error: true

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          files: ./coverage/tarpaulin-report.html
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

  javelin-security-check:
    permissions:
      contents: 'read'
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Run cargo audit
        run: cargo audit --deny warnings

  javelin-build-check:
    permissions:
      contents: 'read'
    strategy:
      matrix:
        os: [ ubuntu-24.04, windows-2022, macOS-15 ]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Build release
        run: cargo build --release

      - name: Build debug
        run: cargo build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ramparts-${{ runner.os }}
          path: target/release/ramparts*
          if-no-files-found: error
          retention-days: 1

  javelin-trivy-scan:
    permissions:
      contents: 'read'
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: true

      - name: Trivy Scan - GitHub Security Report
        if: ${{ env.GH_SEC_REPORT == 'true' }}
        uses: aquasecurity/trivy-action@0.29.0
        with:
          ignore-unfixed: true
          scan-type: "fs"
          cache: "true"
          format: "sarif"
          output: "${{ env.TRIVY_REPORT_FILE }}.sarif"
          severity: "${{ env.TRIVY_SEVERITY }}"

      - name: Upload Report - GitHub Security Report
        if: ${{ env.GH_SEC_REPORT == 'true' }}
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "${{ env.TRIVY_REPORT_FILE }}.sarif"

      - name: Trivy Scan - Text Security Report
        if: ${{ env.GH_SEC_REPORT == 'false' }}
        uses: aquasecurity/trivy-action@0.29.0
        with:
          ignore-unfixed: true
          scan-type: "fs"
          cache: "true"
          format: "table"
          output: "${{ env.TRIVY_REPORT_FILE }}.txt"
          severity: "${{ env.TRIVY_SEVERITY }}"

      - name: Report Check - Text Security Report
        if: ${{ env.GH_SEC_REPORT == 'false' }}
        id: report_check
        shell: bash
        run: |-
          if [[ -s ${{ env.TRIVY_REPORT_FILE }}.txt ]] ; then
            echo "report_file=available" >> ${GITHUB_OUTPUT}
          else
            echo "report_file=unavailable" >> ${GITHUB_OUTPUT}
          fi
          cat ${{ env.TRIVY_REPORT_FILE }}.txt

      - name: Upload Report - Text Security Report
        if: ${{ env.GH_SEC_REPORT == 'false' && steps.report_check.outputs.report_file  == 'available' }}
        uses: actions/upload-artifact@v4
        with:
          name: "${{ env.TRIVY_REPORT_FILE }}"
          path: "${{ env.TRIVY_REPORT_FILE }}.txt"
          if-no-files-found: error
          retention-days: 1

      - name: Failing the Job
        if: ${{ steps.report_check.outputs.report_file  == 'available' }}
        shell: bash
        run: |-
          echo "Vulnerabilities Found.....!"
          exit 1