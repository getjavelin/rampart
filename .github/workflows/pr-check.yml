name: PR Merge Check - Ramparts

on:
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
    branches:
      - "main"
  merge_group:
    types:
      - checks_requested

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  javelin-lint-check:
    permissions:
      contents: 'read'
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Install YARA (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y yara

      - name: Install YARA (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install yara
          # Set environment variables for yara-sys
          echo "YARA_LIBRARY_PATH=/opt/homebrew/lib" >> $GITHUB_ENV
          echo "BINDGEN_EXTRA_CLANG_ARGS=-I/opt/homebrew/include" >> $GITHUB_ENV
          # Also set for Intel Macs
          if [ -d "/usr/local/lib" ]; then
            echo "YARA_LIBRARY_PATH=/usr/local/lib" >> $GITHUB_ENV
            echo "BINDGEN_EXTRA_CLANG_ARGS=-I/usr/local/include" >> $GITHUB_ENV
          fi
        shell: bash

      - name: Install YARA (Windows)
        if: runner.os == 'Windows'
        run: |
          # Windows doesn't have a standard YARA package manager
          # We'll build without YARA features for Windows
          echo "YARA not available on Windows, will build without YARA features"

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Check code without building
        run: |
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            cargo check --no-default-features
          else
            cargo check --all-features
          fi
        shell: bash

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run Clippy linter
        run: |
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            cargo clippy --no-default-features -- -D warnings
          else
            cargo clippy --all-features -- -D warnings
          fi
        shell: bash

  javelin-sast-check:
    permissions:
      contents: 'read'
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install YARA (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y yara

      - name: Install YARA (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install yara
          # Set environment variables for yara-sys
          echo "YARA_LIBRARY_PATH=/opt/homebrew/lib" >> $GITHUB_ENV
          echo "BINDGEN_EXTRA_CLANG_ARGS=-I/opt/homebrew/include" >> $GITHUB_ENV
          # Also set for Intel Macs
          if [ -d "/usr/local/lib" ]; then
            echo "YARA_LIBRARY_PATH=/usr/local/lib" >> $GITHUB_ENV
            echo "BINDGEN_EXTRA_CLANG_ARGS=-I/usr/local/include" >> $GITHUB_ENV
          fi
        shell: bash

      - name: Install YARA (Windows)
        if: runner.os == 'Windows'
        run: |
          # Windows doesn't have a standard YARA package manager
          # We'll build without YARA features for Windows
          echo "YARA not available on Windows, will build without YARA features"

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Run tests
        run: |
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            cargo test --no-default-features
          else
            cargo test --all-features
          fi
        shell: bash

      - name: Run tests with coverage
        run: |
          cargo install cargo-tarpaulin
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            cargo tarpaulin --no-default-features --out Html --output-dir coverage
          else
            cargo tarpaulin --all-features --out Html --output-dir coverage
          fi
        shell: bash
        continue-on-error: true

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          files: ./coverage/tarpaulin-report.html
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

  javelin-security-check:
    permissions:
      contents: 'read'
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install YARA (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y yara

      - name: Install YARA (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install yara
          # Set environment variables for yara-sys
          echo "YARA_LIBRARY_PATH=/opt/homebrew/lib" >> $GITHUB_ENV
          echo "BINDGEN_EXTRA_CLANG_ARGS=-I/opt/homebrew/include" >> $GITHUB_ENV
          # Also set for Intel Macs
          if [ -d "/usr/local/lib" ]; then
            echo "YARA_LIBRARY_PATH=/usr/local/lib" >> $GITHUB_ENV
            echo "BINDGEN_EXTRA_CLANG_ARGS=-I/usr/local/include" >> $GITHUB_ENV
          fi
        shell: bash

      - name: Install YARA (Windows)
        if: runner.os == 'Windows'
        run: |
          # Windows doesn't have a standard YARA package manager
          # We'll build without YARA features for Windows
          echo "YARA not available on Windows, will build without YARA features"

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Run cargo audit
        run: cargo audit --deny warnings

  javelin-build-check:
    permissions:
      contents: 'read'
    strategy:
      matrix:
        os: [ ubuntu-24.04, windows-2022, macOS-15 ]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install YARA (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y yara

      - name: Install YARA (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install yara
          # Set environment variables for yara-sys
          echo "YARA_LIBRARY_PATH=/opt/homebrew/lib" >> $GITHUB_ENV
          echo "BINDGEN_EXTRA_CLANG_ARGS=-I/opt/homebrew/include" >> $GITHUB_ENV
          # Also set for Intel Macs
          if [ -d "/usr/local/lib" ]; then
            echo "YARA_LIBRARY_PATH=/usr/local/lib" >> $GITHUB_ENV
            echo "BINDGEN_EXTRA_CLANG_ARGS=-I/usr/local/include" >> $GITHUB_ENV
          fi
        shell: bash

      - name: Install YARA (Windows)
        if: runner.os == 'Windows'
        run: |
          # Windows doesn't have a standard YARA package manager
          # We'll build without YARA features for Windows
          echo "YARA not available on Windows, will build without YARA features"

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Build release
        run: |
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            cargo build --release --no-default-features
          else
            cargo build --release
          fi
        shell: bash

      - name: Build debug
        run: |
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            cargo build --no-default-features
          else
            cargo build
          fi
        shell: bash

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ramparts-${{ runner.os }}
          path: target/release/ramparts*
          if-no-files-found: error
          retention-days: 1