name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
  # release:
  #   types: [ published ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # ============================================================================
  # RELEASE - Automated releases
  # ============================================================================
  
  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [check, test, security, build, integration]
    if: github.event_name == 'release' && github.event.action == 'published'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Build release binaries
        run: |
          cargo build --release --target x86_64-unknown-linux-gnu
          cargo build --release --target x86_64-pc-windows-msvc
          cargo build --release --target x86_64-apple-darwin

      - name: Create release assets
        run: |
          mkdir -p release
          cp target/x86_64-unknown-linux-gnu/release/rampart release/rampart-linux-x86_64
          cp target/x86_64-pc-windows-msvc/release/rampart.exe release/rampart-windows-x86_64.exe
          cp target/x86_64-apple-darwin/release/rampart release/rampart-macos-x86_64
          
          # Create checksums
          cd release
          sha256sum * > checksums.txt

      - name: Upload release assets
        uses: actions/upload-release-asset@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./release/rampart-linux-x86_64
          asset_name: rampart-linux-x86_64
          asset_content_type: application/octet-stream

      - name: Upload Windows asset
        uses: actions/upload-release-asset@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./release/rampart-windows-x86_64.exe
          asset_name: rampart-windows-x86_64.exe
          asset_content_type: application/octet-stream

      - name: Upload macOS asset
        uses: actions/upload-release-asset@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./release/rampart-macos-x86_64
          asset_name: rampart-macos-x86_64
          asset_content_type: application/octet-stream

      - name: Upload checksums
        uses: actions/upload-release-asset@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./release/checksums.txt
          asset_name: checksums.txt
          asset_content_type: text/plain

  # ============================================================================
  # DEPLOYMENT - Cargo publish
  # ============================================================================
  
  deploy:
    name: Deploy to Crates.io
    runs-on: ubuntu-latest
    needs: [check, test, security, build, integration]
    if: github.event_name == 'release' && github.event.action == 'published'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Publish to Crates.io
        run: cargo publish --token ${{ secrets.CARGO_TOKEN }}
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_TOKEN }}

  # ============================================================================
  # NOTIFICATIONS - Status reporting
  # ============================================================================
  
  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [check, test, security, build, integration]
    if: always()
    steps:
      - name: Notify on failure
        if: failure()
        run: |
          echo "❌ CI/CD pipeline failed!"
          echo "Check the logs at: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        continue-on-error: true

      - name: Notify on success
        if: success()
        run: |
          echo "✅ CI/CD pipeline passed!"
          echo "All checks completed successfully."
        continue-on-error: true 